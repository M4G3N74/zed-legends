"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./components/context/SimplePlayerContext.js":
/*!***************************************************!*\
  !*** ./components/context/SimplePlayerContext.js ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlayerProvider: function() { return /* binding */ PlayerProvider; },\n/* harmony export */   usePlayer: function() { return /* binding */ usePlayer; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _LibraryContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LibraryContext */ \"./components/context/LibraryContext.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst PlayerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nfunction PlayerProvider(param) {\n    let { children } = param;\n    _s();\n    const { songs } = (0,_LibraryContext__WEBPACK_IMPORTED_MODULE_2__.useLibrary)();\n    const [currentSong, setCurrentSong] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [currentTime, setCurrentTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [volume, setVolume] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [repeat, setRepeat] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"none\"); // 'none', 'one', 'all'\n    const [shuffle, setShuffle] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [smartShuffleEnabled, setSmartShuffleEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [bassBoost, setBassBoost] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [megaBoost, setMegaBoost] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [autoplay, setAutoplay] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const playHistoryRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const skipHistoryRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    // Load player preferences from localStorage\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (true) {\n            const savedPreferences = localStorage.getItem(\"playerPreferences\");\n            if (savedPreferences) {\n                try {\n                    const preferences = JSON.parse(savedPreferences);\n                    if (preferences.volume !== undefined) setVolume(preferences.volume);\n                    if (preferences.shuffle !== undefined) setShuffle(preferences.shuffle);\n                    if (preferences.smartShuffleEnabled !== undefined) setSmartShuffleEnabled(preferences.smartShuffleEnabled);\n                    if (preferences.repeat !== undefined) setRepeat(preferences.repeat);\n                    if (preferences.autoplay !== undefined) setAutoplay(preferences.autoplay);\n                    if (preferences.bassBoost !== undefined) setBassBoost(preferences.bassBoost);\n                    if (preferences.megaBoost !== undefined) setMegaBoost(preferences.megaBoost);\n                } catch (error) {\n                    console.error(\"Error loading player preferences:\", error);\n                }\n            }\n            // Load play history\n            const savedPlayHistory = localStorage.getItem(\"playHistory\");\n            if (savedPlayHistory) {\n                try {\n                    playHistoryRef.current = JSON.parse(savedPlayHistory);\n                } catch (error) {\n                    console.error(\"Error loading play history:\", error);\n                }\n            }\n        }\n    }, []);\n    // Save player preferences to localStorage\n    const savePlayerPreferences = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (true) {\n            const preferences = {\n                volume,\n                shuffle,\n                smartShuffleEnabled,\n                repeat,\n                autoplay,\n                bassBoost,\n                megaBoost\n            };\n            localStorage.setItem(\"playerPreferences\", JSON.stringify(preferences));\n        }\n    }, [\n        volume,\n        shuffle,\n        smartShuffleEnabled,\n        repeat,\n        autoplay,\n        bassBoost,\n        megaBoost\n    ]);\n    // Track user interaction with songs\n    const trackUserInteraction = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((interactionType, songId)=>{\n        if (!songId) return;\n        // Record interaction locally\n        if (interactionType === \"play\") {\n            // Add to play history if not already the last played song\n            const lastPlayed = playHistoryRef.current[playHistoryRef.current.length - 1];\n            if (lastPlayed !== songId) {\n                playHistoryRef.current.push(songId);\n                // Keep history at a reasonable size\n                if (playHistoryRef.current.length > 100) {\n                    playHistoryRef.current = playHistoryRef.current.slice(-100);\n                }\n                // Save to localStorage\n                localStorage.setItem(\"playHistory\", JSON.stringify(playHistoryRef.current));\n            }\n        } else if (interactionType === \"skip\") {\n            skipHistoryRef.current.push(songId);\n            // Keep history at a reasonable size\n            if (skipHistoryRef.current.length > 100) {\n                skipHistoryRef.current = skipHistoryRef.current.slice(-100);\n            }\n            // Save to localStorage\n            localStorage.setItem(\"skipHistory\", JSON.stringify(skipHistoryRef.current));\n        }\n        // Send to backend if smart shuffle is enabled\n        if (smartShuffleEnabled) {\n            try {\n                fetch(\"/api/track-interaction\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        userId: localStorage.getItem(\"userId\") || \"anonymous\",\n                        songId,\n                        interactionType,\n                        timestamp: new Date().toISOString()\n                    })\n                }).catch((error)=>{\n                    console.error(\"Failed to send interaction data to backend:\", error);\n                });\n            } catch (error) {\n                console.error(\"Failed to send interaction data to backend:\", error);\n            }\n        }\n    }, [\n        smartShuffleEnabled\n    ]);\n    // Load a song\n    const loadSong = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((song)=>{\n        if (!song) return;\n        console.log(\"Loading song:\", song.title);\n        // Update current song\n        setCurrentSong(song);\n        // Update audio source\n        if (audioRef.current) {\n            const songPath = \"/music/\".concat(encodeURIComponent(song.file));\n            console.log(\"Song path:\", songPath);\n            audioRef.current.src = songPath;\n            audioRef.current.load();\n            audioRef.current.volume = volume;\n        }\n        // Track this interaction\n        trackUserInteraction(\"play\", song.id);\n    }, [\n        volume,\n        trackUserInteraction\n    ]);\n    // Play the current song\n    const playSong = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!audioRef.current) return;\n        console.log(\"Playing song\");\n        const playPromise = audioRef.current.play();\n        if (playPromise !== undefined) {\n            playPromise.catch((error)=>{\n                console.error(\"Error playing audio:\", error);\n                if (error.name === \"NotAllowedError\") {\n                    alert(\"Autoplay was blocked. Please click play to start playback.\");\n                }\n            });\n        }\n    }, []);\n    // Pause the current song\n    const pauseSong = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!audioRef.current) return;\n        console.log(\"Pausing song\");\n        audioRef.current.pause();\n    }, []);\n    // Play next song\n    const playNextSong = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!currentSong || !songs || songs.length === 0) return;\n        console.log(\"Playing next song\");\n        let nextSongIndex = -1;\n        // Handle different playback modes\n        if (shuffle) {\n            // Regular shuffle - completely random\n            const availableSongs = songs.filter((song)=>song.id !== currentSong.id);\n            if (availableSongs.length === 0) return;\n            const randomIndex = Math.floor(Math.random() * availableSongs.length);\n            loadSong(availableSongs[randomIndex]);\n        } else {\n            // Find current song index\n            const currentIndex = songs.findIndex((song)=>song.id === currentSong.id);\n            if (currentIndex !== -1) {\n                // Get next song index\n                nextSongIndex = currentIndex + 1;\n                // Handle repeat all\n                if (nextSongIndex >= songs.length) {\n                    if (repeat === \"all\") {\n                        nextSongIndex = 0;\n                    } else if (!autoplay) {\n                        // Stop playback if we're at the end and not repeating\n                        return;\n                    } else {\n                        nextSongIndex = 0; // Default to first song if autoplay is on\n                    }\n                }\n                // Load and play next song\n                loadSong(songs[nextSongIndex]);\n            }\n        }\n        // Play the song if autoplay is enabled\n        if (autoplay) playSong();\n    }, [\n        currentSong,\n        songs,\n        shuffle,\n        repeat,\n        autoplay,\n        loadSong,\n        playSong\n    ]);\n    // Play previous song\n    const playPreviousSong = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!currentSong || !songs || songs.length === 0) return;\n        // If current time is more than 3 seconds, restart the current song\n        if (audioRef.current && audioRef.current.currentTime > 3) {\n            audioRef.current.currentTime = 0;\n            return;\n        }\n        // Find current song index\n        const currentIndex = songs.findIndex((song)=>song.id === currentSong.id);\n        if (currentIndex !== -1) {\n            // Get previous song index\n            let prevSongIndex = currentIndex - 1;\n            // Handle wrap around\n            if (prevSongIndex < 0) {\n                if (repeat === \"all\") {\n                    prevSongIndex = songs.length - 1;\n                } else {\n                    // If not repeating, stay on first song\n                    prevSongIndex = 0;\n                }\n            }\n            // Load and play previous song\n            loadSong(songs[prevSongIndex]);\n            if (isPlaying) playSong();\n        }\n    }, [\n        currentSong,\n        songs,\n        repeat,\n        isPlaying,\n        loadSong,\n        playSong\n    ]);\n    // Toggle bass boost (dummy implementation)\n    const toggleBassBoost = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!bassBoost && !megaBoost) {\n            setBassBoost(true);\n            setMegaBoost(false);\n        } else if (bassBoost && !megaBoost) {\n            setBassBoost(true);\n            setMegaBoost(true);\n        } else {\n            setBassBoost(false);\n            setMegaBoost(false);\n        }\n        savePlayerPreferences();\n    }, [\n        bassBoost,\n        megaBoost,\n        savePlayerPreferences\n    ]);\n    // Set up Media Session API for background playback\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!currentSong || typeof navigator === \"undefined\" || !(\"mediaSession\" in navigator)) return;\n        try {\n            navigator.mediaSession.metadata = new MediaMetadata({\n                title: currentSong.title || \"Unknown Title\",\n                artist: currentSong.artist || \"Unknown Artist\",\n                album: currentSong.album || \"Unknown Album\",\n                artwork: [\n                    {\n                        src: currentSong.albumArt || \"/images/album-art.png\",\n                        sizes: \"512x512\",\n                        type: \"image/png\"\n                    }\n                ]\n            });\n            // Set action handlers for media keys\n            navigator.mediaSession.setActionHandler(\"play\", playSong);\n            navigator.mediaSession.setActionHandler(\"pause\", pauseSong);\n            navigator.mediaSession.setActionHandler(\"previoustrack\", playPreviousSong);\n            navigator.mediaSession.setActionHandler(\"nexttrack\", playNextSong);\n        } catch (error) {\n            console.error(\"Failed to update Media Session metadata:\", error);\n        }\n    }, [\n        currentSong,\n        playSong,\n        pauseSong,\n        playPreviousSong,\n        playNextSong\n    ]);\n    const value = {\n        currentSong,\n        isPlaying,\n        duration,\n        currentTime,\n        volume,\n        repeat,\n        shuffle,\n        smartShuffleEnabled,\n        bassBoost,\n        megaBoost,\n        autoplay,\n        audioRef,\n        loadSong,\n        playSong,\n        pauseSong,\n        playNextSong,\n        playPreviousSong,\n        toggleBassBoost,\n        trackUserInteraction,\n        setVolume: (newVolume)=>{\n            setVolume(newVolume);\n            if (audioRef.current) {\n                audioRef.current.volume = newVolume;\n            }\n            savePlayerPreferences();\n        },\n        setCurrentTime: (time)=>{\n            if (audioRef.current) {\n                audioRef.current.currentTime = time;\n            }\n        },\n        setRepeat: (value)=>{\n            setRepeat(value);\n            savePlayerPreferences();\n        },\n        setShuffle: (value)=>{\n            setShuffle(value);\n            savePlayerPreferences();\n        },\n        setSmartShuffleEnabled: (value)=>{\n            setSmartShuffleEnabled(value);\n            savePlayerPreferences();\n        },\n        setAutoplay: (value)=>{\n            setAutoplay(value);\n            savePlayerPreferences();\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PlayerContext.Provider, {\n        value: value,\n        children: [\n            children,\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"audio\", {\n                ref: audioRef,\n                preload: \"auto\",\n                playsInline: true,\n                loop: repeat === \"one\",\n                onTimeUpdate: ()=>{\n                    var _audioRef_current;\n                    return setCurrentTime(((_audioRef_current = audioRef.current) === null || _audioRef_current === void 0 ? void 0 : _audioRef_current.currentTime) || 0);\n                },\n                onDurationChange: ()=>{\n                    var _audioRef_current;\n                    return setDuration(((_audioRef_current = audioRef.current) === null || _audioRef_current === void 0 ? void 0 : _audioRef_current.duration) || 0);\n                },\n                onPlay: ()=>setIsPlaying(true),\n                onPause: ()=>setIsPlaying(false),\n                onEnded: ()=>{\n                    if (repeat === \"one\") {\n                        audioRef.current.currentTime = 0;\n                        playSong();\n                    } else {\n                        playNextSong();\n                    }\n                }\n            }, void 0, false, {\n                fileName: \"/home/purple/work/music-stream-next/components/context/SimplePlayerContext.js\",\n                lineNumber: 349,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/purple/work/music-stream-next/components/context/SimplePlayerContext.js\",\n        lineNumber: 347,\n        columnNumber: 5\n    }, this);\n}\n_s(PlayerProvider, \"Lp5ruPNKjpC0zsTratpX6wQ6X+U=\", false, function() {\n    return [\n        _LibraryContext__WEBPACK_IMPORTED_MODULE_2__.useLibrary\n    ];\n});\n_c = PlayerProvider;\nfunction usePlayer() {\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PlayerContext);\n}\n_s1(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/context/SimplePlayerContext.js\n"));

/***/ })

});